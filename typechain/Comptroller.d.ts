/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface ComptrollerContract
  extends Truffle.Contract<ComptrollerInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ComptrollerInstance>;
}

type AllEvents = never;

export interface ComptrollerInstance extends Truffle.ContractInstance {
  _become: {
    (unitroller: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      unitroller: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      unitroller: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      unitroller: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  _setCloseFactor: {
    (
      newCloseFactorMantissa: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      newCloseFactorMantissa: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      newCloseFactorMantissa: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newCloseFactorMantissa: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  _setLiquidationIncentive: {
    (
      newLiquidationIncentiveMantissa: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      newLiquidationIncentiveMantissa: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      newLiquidationIncentiveMantissa: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newLiquidationIncentiveMantissa: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  _setMaxAssets: {
    (
      newMaxAssets: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      newMaxAssets: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      newMaxAssets: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newMaxAssets: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  _setPriceOracle: {
    (newOracle: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      newOracle: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      newOracle: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOracle: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  admin(txDetails?: Truffle.TransactionDetails): Promise<string>;

  checkMembership(
    account: string,
    cToken: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  closeFactorMantissa(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  getAllBorrowers(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

  getAllMarkets(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

  getAssetsIn(
    account: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string[]>;

  liquidationIncentiveMantissa(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  markets(
    cToken: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: boolean; 1: BN }>;

  oracle(txDetails?: Truffle.TransactionDetails): Promise<string>;

  suppliers(
    account: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  methods: {
    _become: {
      (unitroller: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        unitroller: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        unitroller: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        unitroller: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    _setCloseFactor: {
      (
        newCloseFactorMantissa: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        newCloseFactorMantissa: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        newCloseFactorMantissa: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newCloseFactorMantissa: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    _setLiquidationIncentive: {
      (
        newLiquidationIncentiveMantissa: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        newLiquidationIncentiveMantissa: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        newLiquidationIncentiveMantissa: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newLiquidationIncentiveMantissa: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    _setMaxAssets: {
      (
        newMaxAssets: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        newMaxAssets: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        newMaxAssets: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newMaxAssets: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    _setPriceOracle: {
      (newOracle: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        newOracle: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        newOracle: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newOracle: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    admin(txDetails?: Truffle.TransactionDetails): Promise<string>;

    checkMembership(
      account: string,
      cToken: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    closeFactorMantissa(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    getAllBorrowers(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

    getAllMarkets(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

    getAssetsIn(
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string[]>;

    liquidationIncentiveMantissa(
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    markets(
      cToken: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: boolean; 1: BN }>;

    oracle(txDetails?: Truffle.TransactionDetails): Promise<string>;

    suppliers(
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
