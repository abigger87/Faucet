/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface TrancheSystemContract
  extends Truffle.Contract<TrancheSystemInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<TrancheSystemInstance>;
}

export interface OwnershipTransferred {
  name: "OwnershipTransferred";
  args: {
    previousOwner: string;
    newOwner: string;
    0: string;
    1: string;
  };
}

export interface SetUserTrancheEvent {
  name: "SetUserTrancheEvent";
  args: {
    from: string;
    level: BN;
    user: string;
    0: string;
    1: BN;
    2: string;
  };
}

export interface TokenRedemption {
  name: "TokenRedemption";
  args: {
    ids: BN[];
    data: string;
    0: BN[];
    1: string;
  };
}

export interface TrancheCreated {
  name: "TrancheCreated";
  args: {
    from: string;
    level: BN;
    ids: BN[];
    uri: string;
    enabled: boolean;
    0: string;
    1: BN;
    2: BN[];
    3: string;
    4: boolean;
  };
}

export interface TrancheDeleted {
  name: "TrancheDeleted";
  args: {
    from: string;
    level: BN;
    0: string;
    1: BN;
  };
}

export interface TrancheIdAmountUpdate {
  name: "TrancheIdAmountUpdate";
  args: {
    from: string;
    level: BN;
    id: BN;
    amount: BN;
    0: string;
    1: BN;
    2: BN;
    3: BN;
  };
}

export interface TrancheUpdate {
  name: "TrancheUpdate";
  args: {
    from: string;
    level: BN;
    uri: string;
    enabled: boolean;
    0: string;
    1: BN;
    2: string;
    3: boolean;
  };
}

type AllEvents =
  | OwnershipTransferred
  | SetUserTrancheEvent
  | TokenRedemption
  | TrancheCreated
  | TrancheDeleted
  | TrancheIdAmountUpdate
  | TrancheUpdate;

export interface TrancheSystemInstance extends Truffle.ContractInstance {
  create_tranche: {
    (
      _level: number | BN | string,
      _ids: (number | BN | string)[],
      _tranche_uri: string,
      _enabled: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _level: number | BN | string,
      _ids: (number | BN | string)[],
      _tranche_uri: string,
      _enabled: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      _level: number | BN | string,
      _ids: (number | BN | string)[],
      _tranche_uri: string,
      _enabled: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _level: number | BN | string,
      _ids: (number | BN | string)[],
      _tranche_uri: string,
      _enabled: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  delete_tranche: {
    (
      _level: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _level: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      _level: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _level: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  get_tranche_enabled(
    _level: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  get_tranche_exists(
    _level: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  get_tranche_id_amounts(
    _level: number | BN | string,
    _id: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  get_tranche_uri(
    _level: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  get_user_tranche_level(
    _user: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  set_tranche_enabled: {
    (
      _level: number | BN | string,
      _enabled: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _level: number | BN | string,
      _enabled: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      _level: number | BN | string,
      _enabled: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _level: number | BN | string,
      _enabled: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  set_tranche_id_amounts: {
    (
      _level: number | BN | string,
      _id: number | BN | string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _level: number | BN | string,
      _id: number | BN | string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      _level: number | BN | string,
      _id: number | BN | string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _level: number | BN | string,
      _id: number | BN | string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  set_tranche_uri: {
    (
      _level: number | BN | string,
      _uri: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _level: number | BN | string,
      _uri: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      _level: number | BN | string,
      _uri: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _level: number | BN | string,
      _uri: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  set_user_tranche_level: {
    (
      _level: number | BN | string,
      _user: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _level: number | BN | string,
      _user: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      _level: number | BN | string,
      _user: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _level: number | BN | string,
      _user: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferOwnership: {
    (newOwner: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    create_tranche: {
      (
        _level: number | BN | string,
        _ids: (number | BN | string)[],
        _tranche_uri: string,
        _enabled: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _level: number | BN | string,
        _ids: (number | BN | string)[],
        _tranche_uri: string,
        _enabled: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _level: number | BN | string,
        _ids: (number | BN | string)[],
        _tranche_uri: string,
        _enabled: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _level: number | BN | string,
        _ids: (number | BN | string)[],
        _tranche_uri: string,
        _enabled: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    delete_tranche: {
      (
        _level: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _level: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _level: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _level: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    get_tranche_enabled(
      _level: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    get_tranche_exists(
      _level: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    get_tranche_id_amounts(
      _level: number | BN | string,
      _id: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    get_tranche_uri(
      _level: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    get_user_tranche_level(
      _user: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

    renounceOwnership: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    set_tranche_enabled: {
      (
        _level: number | BN | string,
        _enabled: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _level: number | BN | string,
        _enabled: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _level: number | BN | string,
        _enabled: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _level: number | BN | string,
        _enabled: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    set_tranche_id_amounts: {
      (
        _level: number | BN | string,
        _id: number | BN | string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _level: number | BN | string,
        _id: number | BN | string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _level: number | BN | string,
        _id: number | BN | string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _level: number | BN | string,
        _id: number | BN | string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    set_tranche_uri: {
      (
        _level: number | BN | string,
        _uri: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _level: number | BN | string,
        _uri: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _level: number | BN | string,
        _uri: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _level: number | BN | string,
        _uri: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    set_user_tranche_level: {
      (
        _level: number | BN | string,
        _user: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _level: number | BN | string,
        _user: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _level: number | BN | string,
        _user: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _level: number | BN | string,
        _user: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    transferOwnership: {
      (newOwner: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
